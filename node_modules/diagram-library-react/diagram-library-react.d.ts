/// <reference path="../mindfusion-common/jscommon.d.ts" />
/// <reference path="../diagram-library/jsdiag.d.ts" />
// Type definitions for MindFusion.Diagramming for React
// Project: https://www.mindfusion.eu/javascript-diagram.html
// Definitions by: MindFusion <https://www.mindfusion.eu>

// Copyright (c) 2020, MindFusion LLC - Bulgaria.

import React from "react"

declare module "diagram-library-react"
{
	export class DiagramView extends React.Component<DiagramViewProps, any> { }
	interface DiagramViewProps {
		id: String;
		diagram: MindFusion.Diagramming.Diagram;
		allowInplaceEdit?: boolean;
		autoResize?: MindFusion.Diagramming.AutoResize;
		backBrush?: any;
		behavior?: MindFusion.Diagramming.Behavior;
		defaultShape?: MindFusion.Diagramming.Shape;
		enabled?: boolean;
		linkHeadShapeSize?: number;
		linkShape?: MindFusion.Diagramming.LinkShape;
		roundedLinks?: boolean;
		routeLinks?: boolean;
		showAnchors?: MindFusion.Diagramming.ShowAnchors;
		showGrid?: boolean;
		onDiagramChanged?: (
			sender: DiagramView,
			args: MindFusion.EventArgs
		) => void;
		onInitializeLink?: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onInitializeNode?: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onLinkClicked?: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkCreated?: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkDeleted: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkDoubleClicked: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkModified: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkPointed: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkTextEdited: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onNodeClicked: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeCreated: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeDeleted: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeDoubleClicked: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeModified: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodePointed: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeTextEdited: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onLinkCreating: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkDeleting: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkModifying: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onNodeCreating: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeDeleting: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeModifying: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerChildAdded: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerChildAdding: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerChildRemoving: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerChildRemoved: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerFolded: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onContainerUnfolded: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onTreeExpanded: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onTreeCollapsed: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onSelectionModifying: (
			sender: MindFusion.Diagramming.Diagram,
			args:  MindFusion.Diagramming.SelectionEventArgs
		) => void;
		onRepaint: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.EventArgs
		) => void;
		onSizeChanged: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.EventArgs
		) => void;
		onNodeSelected: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onNodeDeselected: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onLinkSelected: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onLinkDeselected: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onControlLoaded: (
			sender: MindFusion.Diagramming.Diagram
		) => void;
		onHitTestAdjustmentHandles: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs | MindFusion.Diagramming.LinkEventArgs
		) => void;
		onDrawAdjustmentHandles: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs | MindFusion.Diagramming.LinkEventArgs
		) => void;
		onClicked: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.DiagramEventArgs
		) => void;
		onEnterInplaceEditMode: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.InplaceEditEventArgs
		) => void;
		onLeaveInplaceEditMode: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.InplaceEditEventArgs
		) => void;
		onCreateEditControl: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.InplaceEditEventArgs
		) => void;
		onCellTextEdited: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.CellEventArgs
		) => void;
		onLaneGridCellTextEdited: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.CellEventArgs
		) => void;
		onSerializeTag: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.SerializeTagEventArgs
		) => void;
		onDeserializeTag: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.SerializeTagEventArgs
		) => void;
		onTableColumnResizing: (
			sender: MindFusion.Diagramming.Diagram,
			args:MindFusion.Diagramming.CellValidationEventArgs
		) => void;
		onTableColumnResized: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.CellEventArgs
		) => void;
		onTableRowResizing: (
			sender: MindFusion.Diagramming.Diagram,
			args:MindFusion.Diagramming.CellValidationEventArgs
		) => void;
		onTableRowResized: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.CellEventArgs
		) => void;
		onNodePasted: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onLinkPasted: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.LinkEventArgs
		) => void;
		onHeaderStartResizing: (
			sender: MindFusion.Diagramming.Diagram,
			args:  MindFusion.Diagramming.HeaderResizeEventArgs
		) => void;
		onHeaderResized: (
			sender: MindFusion.Diagramming.Diagram,
			args:  MindFusion.Diagramming.HeaderResizeEventArgs
		) => void;
		onItemAdded: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.ItemEventArgs
		) => void;
		onItemRemoved: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.ItemEventArgs
		) => void;
		onAnimatedLayoutCompleted: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
		onHyperlinkClicked: (
			sender: MindFusion.Diagramming.Diagram,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
	}

	export class Overview extends React.Component<OverviewProps, any> { }
	interface OverviewProps {
		id: String;
		diagram: MindFusion.Diagramming.Diagram;
		enabled?: boolean;
		backColor?: string;
		dimColor?: string;
		scaleFactor?: number;
		scaleMode?: MindFusion.Diagramming.ScaleMode;
		allowZoom?: boolean;
		autoScrollAmount?: number;
	}

	export class NodeListView extends React.Component<NodeListViewProps, any> { }
	interface NodeListViewProps {
		id: String;
		enabled?: boolean;
		iconSize?: MindFusion.Drawing.Size;
		defaultNodeSize?: MindFusion.Drawing.Size;
		padding?: number;
		orientation?: MindFusion.Diagramming.Orientation;
		tooltipDelay?: number;
		shapeLibraryLocation?: string;
		/** Adds a node to the NodeListView.
		 * @param node The node to add.
		 * @param caption The caption to display for the node.
		*/
		addNode(node:  MindFusion.Diagramming.DiagramNode, caption?: string): void;
		onNodeSelected?: (
			sender: MindFusion.Diagramming.NodeListView,
			args: MindFusion.Diagramming.NodeEventArgs
		) => void;
	}

	export class ZoomControl extends React.Component<ZoomControlProps, any> { }
	interface ZoomControlProps {
		id: String;
		diagram: MindFusion.Diagramming.Diagram;
		enabled?: boolean;
		cornerRadius?: number;
		padding?: number;
		snapToZoomStep?: boolean;
		tickPosition?: MindFusion.Controls.TickPosition;
		showLabel?: boolean;
		textColor?: string;
		shadowColor?: string;
		innerColor?: string;
		borderColor?: string;
		activeColor?: string;
		fill?: string;
		backColor?: string;
		scrollStep?: number;
		zoomStep?: number;
		maxZoomFactor?: number;
		minZoomFactor?: number;
		zoomFactor?: number;
	}

	export class Ruler extends React.Component<RulerProps, any> { }
	interface RulerProps {
		id: String;
		unit?: MindFusion.Drawing.GraphicsUnit;
		enableGuides?: boolean;
		projectRotatedBounds?: boolean;
		negatedY?: boolean;
		negatedX?: boolean;
		verticalScaleVisible?: boolean;
		horizontalScaleVisible?: boolean;
		pointerColor?: string;
		textColor?: string;
		guideColor?: string;
		projectionColor?: string;
		backColor?: string;
		foreColor?: string;
	}
}